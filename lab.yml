- name: Create lab environment
  hosts: localhost
  connection: local
  tasks:
  - name: Generate SSH keys if they do not already exist
    openssh_keypair:
      path: ~/.ssh/id_rsa
      force: False
  - name: Terraform apply
    terraform:
      lock: no
      force_init: true
      project_path: './'
      state: present
  - name: Terraform refresh
    shell: terraform refresh
  - name: Create rg file for dynamic inventory
    shell: echo { \"rg\":\"`terraform output -raw rg`\" } > rg.json
  - name: Include vars of stuff.yaml into the 'stuff' variable
    include_vars:
      file: rg.json
      name: stuff
  - name: Configure dynamic inventory file
    blockinfile:
      path: ./myazure_rm.yml
      state: present
      block: |
        include_vm_resource_groups:
        - {{ stuff["rg"] }}
  - name: Refresh inventory to ensure new instances exist in inventory
    meta: refresh_inventory
  - name: Pause 1 minute to let VMs boot up
    pause:
      minutes: 1

- name: Zypper update
  hosts: all
  remote_user: azadmin
  become: yes
  tasks:
  - name: Update
    zypper:
      name: '*'
      state: latest
    environment:
      ZYPP_LOCK_TIMEOUT: 120

- name: Migration
  hosts: tag_group_node0
  remote_user: azadmin
  become: yes
  tasks:
  - name: Migration
    command: zypper migration --migration 2 --non-interactive --auto-agree-with-licenses
    args:
      creates: /tmp/migration_attempted_delete_this_to_retry
      
- name: Move disk to rescue VM
  hosts: localhost
  connection: local
  tasks:
  - name: Create snapshot of node0 os disk
    shell: az snapshot create -g `terraform output -raw rg` -n node0Snapshot --source node0
  - name: Create new os disk from snapshot
    shell: az disk create -g `terraform output -raw rg` -n chrootedDisk --source node0Snapshot --hyper-v-generation V2
  - name: Attach new os disk to rescue VM node1
    shell: az vm disk attach -g `terraform output -raw rg` --vm-name node1 --name chrootedDisk

- name: Chroot script
  hosts: tag_group_node1
  remote_user: azadmin
  become: yes
  tasks:
  - name: Run chroot script with fix
    script: scripts/chroot.sh

- name: Move fixed disk back to original node
  hosts: localhost
  connection: local
  tasks:
  - name: Deallocate rescue VM
    shell: az vm deallocate -g `terraform output -raw rg` --name node1
  - name: Detach fixed disk from rescue VM
    shell: az vm disk detach -g `terraform output -raw rg` --vm-name node1 --name chrootedDisk
  - name: Swap fixed OS disk to original VM
    shell: az vm update -g `terraform output -raw rg` -n node0 --os-disk chrootedDisk
  - name: Start original node0 VM
    shell: az vm start -g `terraform output -raw rg` -n node0
  - name: Terraform refresh
    shell: terraform refresh
